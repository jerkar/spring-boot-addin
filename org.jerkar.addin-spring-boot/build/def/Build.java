import org.jerkar.api.depmanagement.JkDependencies;
import org.jerkar.api.depmanagement.JkMavenPublication;
import org.jerkar.api.depmanagement.JkMavenPublicationInfo;
import org.jerkar.api.depmanagement.JkModuleId;
import org.jerkar.api.depmanagement.JkPopularModules;
import org.jerkar.api.depmanagement.JkPublishRepos;
import org.jerkar.api.depmanagement.JkRepo;
import org.jerkar.api.depmanagement.JkRepos;
import org.jerkar.api.depmanagement.JkVersion;
import org.jerkar.tool.JkInit;
import org.jerkar.tool.JkOptions;
import org.jerkar.tool.builtins.javabuild.JkJavaBuild;

/**
 * Jerkar build class (generated by Jerkar from existing pom).
 * 
 * @formatter:off
 */
class Build extends JkJavaBuild {
    
    {
        pack.javadoc = true;
    }
    
    @Override
    public JkModuleId moduleId() {
        return JkModuleId.of("org.jerkar", "addin-spring-boot");
    }

    @Override
    public JkVersion version() {
        return JkVersion.name("1.4.2.0-SNAPSHOT");
    }

    @Override
    public JkDependencies dependencies() {
        return JkDependencies.builder()
                .on(JkPopularModules.JERKAR_CORE, "0.5.+", PROVIDED)
                .build();
    }

    @Override
    protected JkRepos downloadRepositories() {
        return super.downloadRepositories().and(JkRepo.mavenOssrhPublicDownload());
    }
    
    @Override
    protected JkMavenPublication mavenPublication() {
        return super.mavenPublication().with(
                JkMavenPublicationInfo
                .of("Jerkar Add-in for Spring Boot", "A Jerkar add-in for Spring boot application", "http://jerkar.github.io")
                .withScm("https://github.com/jerkar/spring-boot-addin.git")
                .andApache2License()
                .andGitHubDeveloper("djeang", "djeangdev@yahoo.fr"));
    }

    @Override
    protected JkPublishRepos publishRepositories() {
        return JkPublishRepos.ossrh(JkOptions.get("repo.ossrh.username"), JkOptions.get("repo.ossrh.password"), pgp());
    }

    public static void main(String[] args) {
        JkInit.instanceOf(Build.class, args, "-verbose=true").doDefault();
    }

}